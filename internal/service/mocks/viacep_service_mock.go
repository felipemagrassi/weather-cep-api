// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/viacep_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/viacep_service.go -destination ./internal/service/mocks/viacep_service_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/felipemagrassi/weather-cep-api/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockCepService is a mock of CepService interface.
type MockCepService struct {
	ctrl     *gomock.Controller
	recorder *MockCepServiceMockRecorder
}

// MockCepServiceMockRecorder is the mock recorder for MockCepService.
type MockCepServiceMockRecorder struct {
	mock *MockCepService
}

// NewMockCepService creates a new mock instance.
func NewMockCepService(ctrl *gomock.Controller) *MockCepService {
	mock := &MockCepService{ctrl: ctrl}
	mock.recorder = &MockCepServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCepService) EXPECT() *MockCepServiceMockRecorder {
	return m.recorder
}

// GetAddressByCep mocks base method.
func (m *MockCepService) GetAddressByCep(ctx context.Context, cep string) (*service.ViaCepResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByCep", ctx, cep)
	ret0, _ := ret[0].(*service.ViaCepResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByCep indicates an expected call of GetAddressByCep.
func (mr *MockCepServiceMockRecorder) GetAddressByCep(ctx, cep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByCep", reflect.TypeOf((*MockCepService)(nil).GetAddressByCep), ctx, cep)
}
